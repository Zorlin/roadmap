Types:
        1: A Block has the following fields:
        parent
	hash
        view
        qc
        aggQC
        signature
        transactions
        randomseed  #Provides the proof for being the leader of the round. This field may not be needed if the qc is used to generate the random seed.
        
        
        
        2: A vote has the following fields:
        block hash
        view 
        signer
        signature
        
        
        3: A QC has the following fields:
        block       # Hash of a block is used in this field as a representative of the actual block.
        view
        signers
        signature
        Type
        

        4: An aggQC has the following fields:
        qcs
        view
        signers
        signature


Local Variables:
        highQC_r
	qc_c # QC built from messages received from child committees
        curView
        latestCommittedBlock



Utilities:
     leader (randseed): returns the leader of the view.
     reset(): resets timer. If the timer expires a node times out.
     extends(block, ancestor): returns true if block is descendant of the ancestor in the chain.
     download(view): Download missing block for the view.
     getMaxViewQC(qcs): returns the qc with the highest view number.
     memberOfLeafCommittee(): returns true if a node is in the leaf committee of the committee overlay



#Core Functions of the Carnot consensus:

        Func safeBlock(block){
	        if block.QC != Null{
		        return block.view >= curView and block.view == block.qc.block.view + 1
                }
	        if block.aggQC != Null{
		        return block.view >= curView and extends(block, block.aggQC.highQC.block)

                }
        }
	
	Func tryToCommitGrandParent(block){
	          parentBlock = block.qc.block
		  grandparentBlock = parentBlock.qc.block
		  return parentBlock.view = grandparentBlock.view+1

	}


        Func update_higQC(qc, aggQC){
		if qc != Null{ # Happy case
			if qc.block.view > highQC.block.view{
				highQC = qc
				}
			if qc.block.view > curView { 	# download blocks from missing views
				while curView++ <= qc.block.view {
				download(curView) 
				}
			}
			#reset()
			}

		if aggQC != Null { # Unhappy case
			if aggQC.highQC.block.view != highQC.block.view{
				highQC = aggQC.highQC # release the lock and adopt the global lock 
				if aggQC.highQC.block.view > curView { # download the blocks of the missed views
					while curView++ <=  aggQC.highQC.view {
						download(curView) 
					}
				}
			#reset()
   
        		}
	}
        
	
	
	
        func receive(block){
		if block.hash is known OR block.view <= latestCommittedBlock.view {return}
		if block.parent missing{ download(block.parent)}
		if block.qc != Null 
			{if block.qc.block.view <= latestCommittedBlock.view {return}}
		if block.aggQC! = Null
			{ 
			block.aggQC.highQC = getMaxViewQC (block.agg_qc.qcs)
			if block.aggQC.highQC.view <= latestCommittedBlock.view {return}
			}
		
		if safeBlock(block){
		update_higQC(block.qc, block.aggQC)
			if memberOfLeafCommittee(){ send(vote, parentCommittee)
			reset()
			tryToCommitGrandParent(block)
			}	
		
		}
		
	}
        
